이전 과정까지 vertexBuffer를 통해서 삼각형을 그렸다. 
이번 시간에 삼각형 2개를 그리고 붙여줘서 사각형을 먼저 그릴거다.

일단 각 정점 데이터를 저장한 곳은 Game 클래스 안에 저장해뒀었다.
void Game::Init(const WindowInfo& info)
{
	GEngine->Init(info);

	vector<Vertex> vec(6);
	vec[0].pos = Vec3(-0.5f, 0.5f, 0.5f);
	vec[0].color = Vec4(1.f, 0.f, 0.f, 1.f);
	vec[1].pos = Vec3(0.5f, 0.5f, 0.5f);
	vec[1].color = Vec4(0.f, 1.f, 0.f, 1.f);
	vec[2].pos = Vec3(0.5f, -0.5f, 0.5f);
	vec[2].color = Vec4(0.f, 0.f, 1.f, 1.f);

	vec[3].pos = Vec3(0.5f, -0.5f, 0.5f);
	vec[3].color = Vec4(0.f, 0.f, 1.f, 1.f);
	vec[4].pos = Vec3(-0.5f, -0.5f, 0.5f);
	vec[4].color = Vec4(0.f, 1.f, 0.f, 1.f);
	vec[5].pos = Vec3(-0.5f, 0.5f, 0.5f);
	vec[5].color = Vec4(1.f, 0.f, 0.f, 1.f);
	
	
	mesh->Init(vec, indexVec);

	shader->Init(L"..\\Resources\\Shader\\default.hlsli");

	GEngine->GetCmdQueue()->WaitSync();
}
Init함수에서 정점을 총 6개 찍어줬다. 그리고 2개씩 출력하는 부분인

void Game::Update()
{
	GEngine->RenderBegin();

	shader->Update();

	{
		Transform t; //vec4 offset
		t.offset = Vec4(0.f, 0.f, 0.f, 0.f);  
		mesh->SetTransform(t);

		mesh->Render();
	}
	GEngine->RenderEnd();
}

업데이트함수에서 Transform 부분을 하나만 남기고 제거해준다. 또한 색상과 위치를 변하게 했었으니까 t.offset값을 0으로 변경해준다.
이런 식으로 삼각형 2개 출력하는 부분을 모두 수정하고 출력시키면 6점을 각 3점씩 사용하여 삼각형 2개를 이어그려서 출력된다.

하지만 점 (벡터)의 갯수를 더 적게사용해서 효율적으로 사각형을 만들 수 있는 방법이 있는데 IndexBuffer를 만들어서 VertexBuffer와 IndexBuffer를 모두 사용하여 처리하는 방법이다.
이를 통해 4개의 Vector를 가지고 사각형을 만들 수 있는데
우선 mesh 클래스를 수정해야한다.

class Mesh
{
public:
	void Init(const vector<Vertex>& vertexBuffer, const vector<uint32>& indexBuffer);
	void Render();

	void SetTransform(const Transform& t) { _transform = t; }

private:
	void CreateVertexBuffer(const vector<Vertex>& buffer);
	void CreateIndexBuffer(const vector<uint32>& buffer);

private:
	ComPtr<ID3D12Resource>		_vertexBuffer;
	D3D12_VERTEX_BUFFER_VIEW	_vertexBufferView = {};
	uint32 _vertexCount = 0;

	ComPtr<ID3D12Resource>		_indexBuffer;
	D3D12_INDEX_BUFFER_VIEW	_indexBufferView = {};
	uint32 _indexCount = 0;

	Transform _transform = {};
};

바뀐것은 일단 indexBuffer관련 인자들을 만든 것이고, 이 인자들을 다루기 위해 Init함수를 바꿔줬다. 원래 VertexBuffer만으로 Init을 할수 있었기에 Init함수에 VertexBuffer을 
생성하는 코드만 저장하고 있었는데, IndexBuffer도 사용해야하기 때문에 둘다 따로 함수로 뺴주고 Init함수는 두 함수를 불러오는 식으로 바꿨다.

따로 뺴둔 두 함수 CreateVertexBuffer와 CreateIndexBuffer는 이름에서 알 수 있듯이 각각의 버퍼들을 생성하는 함수이다.

특히 CreateIndexBuffer 함수 부분을 공부하다보면 분명 사용할 데이터를 줄여 효율적으로 사용하기 위해 쓰는 코드인데 왜 int32 같은 큰 자료형을 사용하지? 하고 생각했다.
우리가 쓰는 int형이기때문에 편해서 그런 것 같기도 하고, 설명으로는 Game클래스에 적어둔 Vector<vertex> 의 벡터의 정보로 그림을 그리는데 지금은 삼각형이라서 그렇지 나중에 
하이퀄리티의 소스를 출력시키려면 엄청 거대한 데이터를 다뤄야한다고 한다. 그 때 벡터에 저장되는 데이터의 크기가 어마어마하므로 그 벡터를 줄일 수 있는 
vertexbuffer+indexbuffer 기법이 효율적이라는 것이다.

void Game::Init(const WindowInfo& info)
{
	GEngine->Init(info);

	vector<Vertex> vec(4);
	vec[0].pos = Vec3(-0.5f, 0.5f, 0.5f);
	vec[0].color = Vec4(1.f, 0.f, 0.f, 1.f);
	vec[1].pos = Vec3(0.5f, 0.5f, 0.5f);
	vec[1].color = Vec4(0.f, 1.f, 0.f, 1.f);
	vec[2].pos = Vec3(0.5f, -0.5f, 0.5f);
	vec[2].color = Vec4(0.f, 0.f, 1.f, 1.f);
	vec[3].pos = Vec3(-0.5f, -0.5f, 0.5f);
	vec[3].color = Vec4(0.f, 1.f, 0.f, 1.f);

	vector<uint32> indexVec;
	{
		indexVec.push_back(0);
		indexVec.push_back(1);
		indexVec.push_back(2);
	}
	{
		indexVec.push_back(0);
		indexVec.push_back(2);
		indexVec.push_back(3);
	}

	mesh->Init(vec, indexVec);

	shader->Init(L"..\\Resources\\Shader\\default.hlsli");

	GEngine->GetCmdQueue()->WaitSync();
}

game클래스에 가서 저장한 벡터 데이터들을 수정하고 indexVec을 만들어 mesh의 init함수에 인자로 넣어주면 저장된 벡터데이터에 맞게 사각형이 잘 출력됨을 확인할 수 있다.

