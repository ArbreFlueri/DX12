이번 공부의 목표 
RootSignature를 사용하는 방법이 달라짐 
원래는 root parameter에 ConstantBufferView(CBV) 즉 root descriptor를 넣는 방법이었는데
root table을 넣는 방법으로 삼각형 2개를 똑같은 출력이 되게하는게 목표임

MS 문서 상 register에 넣을 수 있는 용량은 64DWORD
1DWORD = 4bite 이기 때문에 256bite의 용량을 가진다.
따라서 사용할 수 있는 용량이 제한적이기 때문에 더 효율적으로 많은 데이터를 다룰 수 있는 방법이 필요함 -> table 이용
(경우에 따라서 사용할 일이 생길 수도 있으나 전보다 코드가 복잡해진다)

복사는 즉시 일어나지만 CMD_LIST 를 통해 register로 올려보내는건 전과 같이 나중에 한다. (CmdQueue를 사용하면 이는 어쩔수없음)

descHeap 2개 만들어서 ConstantBuffer의 내용물이 어디있는지 가리키는 용도(CBV)
하나는 register에게 제출할 용도(Shader)

ConsterBuffer 사이의 복사 참조는 즉시 되고 CBV와 Shader도 즉시 처리하지만 Shader이랑 register은 나중에 처리됨 (윗말과 똑같음)

SetDescriptorHeaps 한번에 한번씩 바인딩 가능하다. shader_visible로 반드시 먄들어줘야 출력이 제대로나옴
프레임당 한번만 설정하고 어마어마하게 큰 사이즈로 만들어줘야한다. 배열을 크게 조져버리자.

일단 TableDescriptorHeap 클래스를 작성했다. 
GroupSize와 GroupIndex를 따로 설정해주고 그룹사이즈만큼 이동하고 입력받은 reg만큼 이동할 수 있도록 Handle 함수를 사용하여
handle값을 가져온다.


void Mesh::Render()
{
	CMD_LIST->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	CMD_LIST->IASetVertexBuffers(0, 1, &_vertexBufferView); // Slot: (0~15)

	//TODO
	// 1) Buffer에다가 데이터 세팅
	// 2) TableDescHeap에 CBV 전달
	// 3) 모두 세팅이 끝났으면 TableDescHeap 커밋
	{
		D3D12_CPU_DESCRIPTOR_HANDLE handle = GEngine->GetCB()->PushData(0, &_transform, sizeof(_transform));
		GEngine->GetTableDescHeap()->SetCBV(handle, CBV_REGISTER::b0);
	}
	{
		D3D12_CPU_DESCRIPTOR_HANDLE handle = GEngine->GetCB()->PushData(0, &_transform, sizeof(_transform));
		GEngine->GetTableDescHeap()->SetCBV(handle, CBV_REGISTER::b1);
	}
	

	GEngine->GetTableDescHeap()->CommitTable(); //이걸로 resi

	CMD_LIST->DrawInstanced(_vertexCount, 1, 0, 0);
  
}

Mesh의 Render 함수에 수정된곳이 있는데

Table을 사용하기전에
GEngine->GetCB()->PushData(0, &_transform, sizeof(_transform));
GEngine->GetCB()->PushData(1, &_transform, sizeof(_transform));
이 코드를 사용했는데 함수에서 연산된 handle값을 D3D12_CPU_DESCRIPTOR_HANDLE 자료형의 handle 변수에 저장하고 
이를 SetCBV 함수의 인자로 넣어준다. 그러면 디바이스의 CopyDescriptor 함수를 통해 cpu핸들 2개를 받아 원래 위치와 목적지 위치를 알려준것이다.

즉 그룹이 만들어졌고 그 그룹을 통해 descIndex와 Tableindex, register이 연결되었으므로 CommitTable함수를 통해 
현재 내 그룹인덱스에 해당되는 칸을 register에 올려줘 정상적으로 작업할 수 있도록 한다.
